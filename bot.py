import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import os
import youtube_dl
from discord.ui import View, Button, Modal, TextInput, Select

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

ytdl_format_options = {
    'format': 'bestaudio/best',
    'quiet': True,
    'noplaylist': True,
    'extract_flat': False
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)
music_queue = []
current_player = None
current_controller = None
looping = False
volume_level = 0.5

class LinkModal(Modal, title="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á"):
    link_input = TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube", placeholder="https://youtube.com/... ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á", required=True)

    async def on_submit(self, interaction: discord.Interaction):
        global current_controller
        if interaction.user.voice is None:
            return await interaction.response.send_message("‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞", ephemeral=True)

        current_controller = interaction.user.id
        url = self.link_input.value
        music_queue.append(url)

        if not interaction.guild.voice_client:
            vc = await interaction.user.voice.channel.connect()
            await play_next(interaction.guild)

        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß: {url}", ephemeral=True)

class VolumeModal(Modal, title="üîä ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á 1-100%"):
    vol_input = TextInput(label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (%)", placeholder="‡πÄ‡∏ä‡πà‡∏ô 50", required=True)

    async def on_submit(self, interaction: discord.Interaction):
        global volume_level
        try:
            vol = int(self.vol_input.value)
            if 1 <= vol <= 100:
                volume_level = vol / 100
                vc = interaction.guild.voice_client
                if vc and vc.source:
                    vc.source.volume = volume_level
                await interaction.response.send_message(f"‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô {vol}%", ephemeral=True)
            else:
                raise ValueError
        except:
            await interaction.response.send_message("‚ùå ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-100 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)

class QueueDropdown(discord.ui.Select):
    def __init__(self, placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß"):
        super().__init__(
            placeholder=placeholder,
            options=[],
            min_values=1,
            max_values=1
        )

    async def callback(self, interaction: discord.Interaction):
        global music_queue
        if interaction.user.id != current_controller:
            return await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°", ephemeral=True)
        index = self.options.index(next(o for o in self.options if o.value == self.values[0]))
        song = music_queue.pop(index)
        music_queue.insert(0, song)
        await interaction.response.send_message(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏•‡∏á {song} ‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

class MusicControlView(View):
    @discord.ui.button(label="‚ñ∂Ô∏è/‚è∏Ô∏è", style=discord.ButtonStyle.primary)
    async def play_pause(self, interaction: discord.Interaction, button: Button):
        vc = interaction.guild.voice_client
        if vc:
            if vc.is_playing(): vc.pause()
            elif vc.is_paused(): vc.resume()
        await interaction.response.defer()

    @discord.ui.button(label="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á", style=discord.ButtonStyle.success)
    async def add_song(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(LinkModal())

    @discord.ui.button(label="üîä ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á", style=discord.ButtonStyle.secondary)
    async def adjust_volume(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(VolumeModal())

    @discord.ui.button(label="üîÅ loop", style=discord.ButtonStyle.secondary)
    async def toggle_loop(self, interaction: discord.Interaction, button: Button):
        global looping
        if interaction.user.id != current_controller:
            return await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°", ephemeral=True)
        looping = not looping
        await interaction.response.send_message(f"Loop {'‡πÄ‡∏õ‡∏¥‡∏î' if looping else '‡∏õ‡∏¥‡∏î'} ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

    @discord.ui.button(label="üëë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°", style=discord.ButtonStyle.danger)
    async def change_controller(self, interaction: discord.Interaction, button: Button):
        class ControllerModal(Modal, title="üëë ‡πÉ‡∏™‡πà ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà"):
            user_input = TextInput(label="User ID", placeholder="‡πÉ‡∏™‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

            async def on_submit(self2, interaction2):
                global current_controller
                if interaction.user.id != current_controller:
                    return await interaction2.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°", ephemeral=True)
                try:
                    new_id = int(self2.user_input.value)
                    current_controller = new_id
                    await interaction2.response.send_message("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
                except:
                    await interaction2.response.send_message("‚ùå ‡πÉ‡∏™‡πà ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)

        await interaction.response.send_modal(ControllerModal())

    @discord.ui.select(cls=QueueDropdown)
    async def show_queue(self, select, interaction: discord.Interaction):
        pass

async def play_next(guild):
    global current_player
    if not music_queue:
        await guild.voice_client.disconnect()
        return
    url = music_queue[0]
    data = ytdl.extract_info(url, download=False)
    audio_url = data['url']
    source = await discord.FFmpegOpusAudio.from_probe(audio_url, method="fallback")
    source.volume = volume_level
    current_player = source
    guild.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(guild), bot.loop) if not looping else guild.voice_client.play(source))

@bot.tree.command(name="setup_music", description="üéµ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
async def setup_music(interaction: discord.Interaction):
    embed = discord.Embed(title="üé∂ ‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á",
                          description=f"üåä ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á\n\nüëë ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏î‡∏¢: <@{interaction.user.id}>",
                          color=discord.Color.green())
    await interaction.channel.send(embed=embed, view=MusicControlView())
    await interaction.response.send_message("‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Logged in as {bot.user}")

bot.run(os.environ["TOKEN"])
